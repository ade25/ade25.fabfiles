import os
import getpass
from fabric.api import task
from fabric.api import cd
from fabric.api import env
from fabric.api import run
from fabric.api import roles
from fabric.api import require
from fabric.api import execute

from ade25.fabfiles import project
from ade25.fabfiles.server import controls

from slacker import Slacker
slack = Slacker('${settings:slack-api-token}')

################################################
# Set working directory to the fabfile location
BUILD_PATH = os.path.dirname(os.path.realpath(os.path.abspath(__file__)))
os.chdir(BUILD_PATH)

################################################
# Settings

env.use_ssh_config = True
env.forward_agent = True
env.port = '22'
env.user = 'root'
env.hosts = ['${fabric:host}']
env.hosts_staging = ['${fabric:host}']
env.hostname = '${fabric:host}'
env.hostname_staging = '${fabric:host_staging}'
env.webserver = '${fabric:webserver}'
env.code_root = '${fabric:directory}'
env.local_root = '${buildout:directory}'
env.sitename = 'lra'
env.code_user = 'root'
env.prod_user = 'www'
env.actor = ${settings:username}

env.roledefs = {
    'production': ['${fabric:host}'],
    'staging': ['${fabric:host}']
}

###################################################
# GIT factory

def _deploy_git_factory():
    import fabdeploit

    class GitFilter(fabdeploit.GitFilter):
        
        def filter(self):
            for obj in self.filtered_tree:
                if obj.path in ('build', 'docs'):
                    self.remove(obj.name)

    class Git(fabdeploit.Git):
        local_repository_path = os.path.dirname(BUILD_PATH)
        release_author = 'Kreativkombinat GbR <info@kreativkombinat.de>'
        release_commit_filter_class = GitFilter

    return Git

def _deploy_base_env():
    require('git')
    env.use_ssh_config = True


###################################################
# Base Tasks

@task
def deploy_push_files():
    require('git')
    env.git.pull()
    env.git.create_release_commit()
    env.git.push()

@task
def deploy_apply_files():
    require('git')
    env.git.switch_release()


####################################################
# Deployment

@task
@roles('production')
def develop():
    """ Restart all """
    with cd(env.code_root):
        run('nice bin/develop up')


@task
@roles('production')
def restart():
    """ Restart all """
    project.cluster.restart_clients()


@task
@roles('production')
def restart_all():
    """ Restart all """
    with cd(env.webserver):
        run('nice bin/supervisorctl restart all')


@task
@roles('production')
def restart_nginx():
    """ Restart Nginx """
    controls.restart_nginx()


@task
@roles('production')
def restart_varnish():
    """ Restart Varnish """
    controls.restart_varnish()


@task
@roles('production')
def restart_haproxy():
    """ Restart HAProxy """
    controls.restart_haproxy()


@task
def deploy(actor=None):
    """ Deploy current master to production server """
    opts = dict(
        sitename=env.get('sitename'),
        hostname=env.get('hostname'),
        actor=actor or env.get('actor') or getpass.getuser(),
    )
    execute(deploy_push_files)
    controls.update()
    project.cluster.restart_clients()
    msg = '[%(hostname)s] *%(sitename)s* deployed by %(actor)s' % opts
    user = 'fabric'
    icon = ':shipit:'
    slack.chat.post_message('#development', msg, username=user, icon_emoji=icon)


@task
def deploy_full(actor=None):
    """ Deploy current master to production and run buildout """
    opts = dict(
        sitename=env.get('sitename'),
        hostname=env.get('hostname'),
        actor=actor or env.get('actor') or getpass.getuser(),
    )
    project.site.update()
    project.site.build()
    project.cluster.restart_clients()
    msg = '[%(hostname)s] *%(sitename)s* deployed by %(actor)s' % opts
    user = 'fabric'
    icon = ':shipit:'
    slack.chat.post_message('#development', msg, username=user, icon_emoji=icon)


@task
def rebuild(actor=None):
    """ Deploy current master to production and run buildout """
    opts = dict(
        sitename=env.get('sitename'),
        hostname=env.get('hostname'),
        actor=actor or env.get('actor') or getpass.getuser(),
    )
    project.site.update()
    project.site.build_full()
    project.cluster.restart_clients()
    msg = '[%(hostname)s] *%(sitename)s* rebuild by %(actor)s' % opts
    user = 'fabric'
    icon = ':shipit:'
    slack.chat.post_message('#development', msg, username=user, icon_emoji=icon)


@task
def get_data():
    """ Copy live database for local development """
    project.db.download_data()


@task
def ctl(*cmd):
    """Runs an arbitrary supervisorctl command."""
    with cd(env.webserver):
        run('nice bin/supervisorctl ' + ' '.join(cmd))
